// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PetService {
  id                  String   @id @default(cuid())
  name                String
  address             String
  city                String
  state               String
  postalCode          String?
  country             String   @default("US")
  latitude            Float?
  longitude           Float?
  serviceType         String   // vet, groomer, boarding, training, sitting
  specialties         String[] // dog, cat, exotic, emergency
  servicesOffered     String[] // grooming, boarding, surgery, training
  priceRange          String?  // $, $$, $$$, $$$$
  acceptsInsurance    Boolean  @default(false)
  emergencyServices   Boolean  @default(false)
  certifications      String[] // AKC, CCPDT, NAVTA, etc.
  googlePlaceId       String?  @unique
  phone               String?
  website             String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  appointments        ServiceAppointment[]
  reviews             Review[]

  @@map("pet_services")
}

model ServiceAppointment {
  id                 String   @id @default(cuid())
  petServiceId       String
  appointmentType    String
  date               DateTime
  estimatedDuration  Int?     // minutes
  priceEstimate      Float?
  notes              String?
  source             String   @default("manual")
  createdAt          DateTime @default(now())

  petService         PetService @relation(fields: [petServiceId], references: [id], onDelete: Cascade)

  @@index([petServiceId, date])
  @@map("service_appointments")
}

model Review {
  id           String     @id @default(cuid())
  petServiceId String
  rating       Int
  reviewText   String?
  date         DateTime   @default(now())
  source       String?    // google | user
  authorName   String?
  verified     Boolean    @default(false)

  petService   PetService @relation(fields: [petServiceId], references: [id], onDelete: Cascade)

  @@index([petServiceId])
}

model ApiCache {
  id        String   @id @default(cuid())
  key       String   @unique
  payload   Json
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt])
}
